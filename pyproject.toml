[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "yesman-claude"
version = "0.1.0"
authors = [
    {name = "Yesman Claude Developer"},
]
description = "Automated Claude CLI tool with project management"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "click>=8.0",
    "pyyaml>=5.4",
    "pexpect>=4.8",
    "tmuxp>=1.55.0",
    "libtmux>=0.46.2",
    "rich>=13.0.0",
    "psutil>=5.9.0",
    "textual>=0.41.0",
    "fastapi>=0.116.0",
    "uvicorn>=0.35.0",
    "jinja2>=3.1.6",
    "python-multipart>=0.0.20",
    "sb-libs-py>=0.1.0",
    "bandit>=1.8.6",
    "requests>=2.32.4",
    "starlette>=0.47.2",
    "urllib3>=2.5.0",
    "sse-starlette>=3.0.2",
    "aiohttp>=3.12.15",
    "langchain>=0.3.27",
]

[project.urls]
Homepage = "https://github.com/yourusername/yesman-claude"

[project.scripts]
yesman = "yesman:cli"

[tool.setuptools]
py-modules = ["yesman", "auto_claude"]

[tool.setuptools.packages.find]
where = ["."]
include = ["yesman*", "commands*", "libs*"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--timeout=120",
    "-n=auto",
    "--maxfail=5",
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
markers = [
    "unit: Unit tests that test individual components",
    "integration: Integration tests that test multiple components together",
    "slow: Tests that take more than 5 seconds to run",
    "requires_network: Tests that require network access",
    "asyncio: Tests that use asyncio",
    "security: Security validation tests",
    "performance: Performance monitoring tests",
    # Enhanced testing infrastructure markers
    "property: Property-based tests using Hypothesis",
    "contract: API contract tests for interface validation",
    "chaos: Chaos engineering tests for system resilience",
    "benchmark: Performance benchmark tests with detailed metrics",
    "regression: Performance regression detection tests",
    "resilience: System resilience and fault tolerance tests",
    "load: Load testing and scalability tests",
    "smoke: Smoke tests for basic functionality validation",
]
timeout = 120
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestDeprecationWarning",
]

[tool.coverage.run]
branch = true
source = ["libs", "commands"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
    "ruff>=0.12.3",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
    "types-PyYAML>=6.0.0",
    "mdformat>=0.7.0",
    "mdformat-gfm>=0.3.0",
    "mdformat-tables>=0.4.0",
    "bandit[toml]>=1.8.6",
    "types-requests>=2.32.4.20250611",
    "httpx>=0.28.1",
    "pytest>=8.4.1",
    "faker>=37.5.3",
    "watchdog>=3.0.0",
]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
    # Enhanced testing infrastructure dependencies
    "hypothesis>=6.100.0",    # Property-based testing
    "factory-boy>=3.3.0",     # Test data factories
    "faker>=26.0.0",          # Realistic fake data generation
    "pytest-benchmark>=4.0.0", # Performance benchmarking
    "pact-python>=2.0.0",     # Contract testing (optional)
    "pytest-sugar>=1.0.0",    # Better test output formatting
    "pytest-html>=4.0.0",     # HTML test reports
]
