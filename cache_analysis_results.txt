=== Performance Baseline ===
Date: #오후

Testing: uv run ./yesman.py ls
Elapsed time: .179691000s

Testing: uv run ./yesman.py show
Elapsed time: .182722000s

Testing: uv run ./yesman.py status
Elapsed time: .172833000s

=== Cache Related Files ===
./libs/ai/adaptive_response.py
./libs/automation/automation_manager.py
./libs/core/__init__.py
./libs/core/cache_analytics.py
./libs/core/cache_core.py
./libs/core/cache_manager.py
./libs/core/cache_storage.py
./libs/core/claude_monitor.py
./libs/core/interfaces.py
./libs/core/session_cache.py
./libs/core/session_manager.py
./libs/core/settings.py
./libs/core/types.py
./libs/dashboard/health_calculator.py
./libs/dashboard/widgets/git_activity.py
./libs/dashboard/widgets/progress_tracker.py
./libs/dashboard/widgets/project_health.py
./libs/tmux_manager.py

=== Cache Usage Patterns ===
libs/tmux_manager.py:22:        self.session_cache = SessionCache(default_ttl=5.0, max_entries=100)
libs/tmux_manager.py:130:        return self.session_cache.get_or_compute(cache_key, fetch_session_info)
libs/tmux_manager.py:154:        return self.session_cache.get_or_compute(cache_key, fetch_sessions_list)
libs/tmux_manager.py:159:            self.session_cache.invalidate(f"session_info:{session_name}")
libs/tmux_manager.py:161:            self.session_cache.invalidate_pattern("session_*")
libs/tmux_manager.py:162:            self.session_cache.invalidate("sessions_list")
libs/tmux_manager.py:166:        return self.session_cache.get_stats()
commands/cleanup.py:53:    if tauri_cache.exists():
commands/cleanup.py:54:        size = sum(f.stat().st_size for f in tauri_cache.rglob('*') if f.is_file())
libs/core/cache_storage.py:76:            for key, entry in self._cache.items():
libs/core/cache_storage.py:98:            lru_key = min(self._cache.keys(), 
libs/core/cache_storage.py:123:            entry = self._cache.get(key)
libs/core/cache_storage.py:172:            old_entry = self._cache.get(key)
libs/core/cache_storage.py:209:                old_entry = self._cache.get(key)
libs/core/cache_storage.py:342:            matching_keys = [key for key in self._cache.keys() if pattern in key]
libs/core/cache_storage.py:359:            self._cache.clear()
libs/core/cache_storage.py:369:            return list(self._cache.keys())
libs/core/cache_storage.py:377:                for key, entry in self._cache.items()
libs/core/settings.py:96:        self.cache.ttl = float(os.getenv('YESMAN_CACHE_TTL', self.cache.ttl))
libs/core/settings.py:97:        self.cache.max_entries = int(os.getenv('YESMAN_CACHE_MAX_ENTRIES', self.cache.max_entries))
libs/core/settings.py:142:                'ttl': self.cache.ttl,
libs/core/settings.py:143:                'max_entries': self.cache.max_entries,
libs/core/settings.py:144:                'enable_compression': self.cache.enable_compression,
libs/core/settings.py:145:                'cleanup_interval': self.cache.cleanup_interval
libs/core/cache_analytics.py:41:            for entry in self.storage._cache.values():
libs/core/cache_analytics.py:122:                entry_ages = [current_time - entry.timestamp for entry in self.storage._cache.values()]
libs/core/cache_analytics.py:202:                entry_ages = [current_time - entry.timestamp for entry in self.storage._cache.values()]
libs/core/interfaces.py:158:class ICache(ABC):
libs/core/interfaces.py:432:    CACHE_HIT = "cache.hit"
libs/core/interfaces.py:433:    CACHE_MISS = "cache.miss"
libs/core/interfaces.py:434:    CACHE_EVICTION = "cache.eviction"
libs/core/session_manager.py:97:            cache = SessionCache(default_ttl=30.0, max_entries=500)
libs/core/session_manager.py:103:            cache = SessionCache(default_ttl=3.0, max_entries=100)
libs/core/session_manager.py:134:        return self.cache.get_or_compute(cache_key, compute_sessions)
libs/core/session_manager.py:213:        return self.cache.get_or_compute(cache_key, compute_session_info)
libs/core/session_manager.py:612:            invalidated = self.cache.invalidate(session_key)
libs/core/session_manager.py:617:            cleared = self.cache.clear()
libs/core/session_manager.py:627:        invalidated = self.cache.invalidate("all_sessions")
libs/core/session_manager.py:646:        stats = self.cache.get_stats()
libs/ai/adaptive_response.py:138:            self._learning_cache.update({

=== Cache Import Statements ===
libs/core/__init__.py:9:from .session_cache import SessionCache
libs/core/cache_analytics.py:8:from .cache_core import CacheStats
libs/core/cache_manager.py:5:from .cache_storage import CacheStorage
libs/core/cache_manager.py:6:from .cache_analytics import CacheAnalytics
libs/core/cache_manager.py:7:from .cache_core import InvalidationStrategy
libs/core/cache_storage.py:9:from .cache_core import CacheEntry, CacheStats, InvalidationStrategy, generate_content_hash
libs/core/session_cache.py:14:from .cache_manager import SessionCache
libs/core/session_cache.py:15:from .cache_core import InvalidationStrategy, CacheTag
libs/core/session_manager.py:23:from .session_cache import SessionCache

=== Cache Core Files Line Count ===
     255 libs/core/cache_analytics.py
      86 libs/core/cache_core.py
     140 libs/core/cache_manager.py
     460 libs/core/cache_storage.py
      21 libs/core/session_cache.py
     962 total

=== Cache Dependency Tree ===
--- SessionManager Cache Usage ---
21-from libs.yesman_config import YesmanConfig
22-from .models import SessionInfo, WindowInfo, PaneInfo, TaskPhase
23:from .session_cache import SessionCache
24-from .progress_tracker import ProgressAnalyzer
25-from ..utils import ensure_log_directory
--
27-
28-class OperationMode(Enum):
29:    """Operation modes for different cache behaviors"""
30-    CLI = "cli"          # Command-line interface mode (no caching)
31-    DAEMON = "daemon"    # Long-running daemon mode (aggressive caching)
--
47-        self.operation_mode = operation_mode or self._detect_operation_mode()
48-        
49:        # Initialize cache based on operation mode
50:        self.cache = self._init_cache_for_mode()
51-        
52-        # Initialize progress analyzer
--
86-        return OperationMode.CLI
87-    
88:    def _init_cache_for_mode(self) -> Optional[SessionCache]:
89:        """Initialize cache based on operation mode"""
90-        if self.operation_mode == OperationMode.CLI:
91-            # CLI mode: No caching for immediate, fresh data
--
95-        elif self.operation_mode == OperationMode.DAEMON:
96-            # Daemon mode: Aggressive caching for long-running processes
97:            cache = SessionCache(default_ttl=30.0, max_entries=500)
98-            self.logger.info("Daemon mode: Aggressive caching (30s TTL, 500 entries)")
99:            return cache
100-            
101-        else:  # WEB mode
102-            # Web mode: Moderate caching for dashboard responsiveness
103:            cache = SessionCache(default_ttl=3.0, max_entries=100)
104-            self.logger.info("Web mode: Moderate caching (3s TTL, 100 entries)")
105:            return cache
106-    
107-    def get_all_sessions(self) -> List[SessionInfo]:
--
126-        
127-        # CLI mode: Always compute fresh data (no caching)
128:        if self.operation_mode == OperationMode.CLI or self.cache is None:
129-            self.logger.debug("CLI mode: Computing fresh session data")
130-            return compute_sessions()
131-        
132:        # Other modes: Use cache with compute function
133:        cache_key = "all_sessions"
134:        return self.cache.get_or_compute(cache_key, compute_sessions)
135-    
136-    def _get_session_info(self, project_name: str, project_conf: Dict[str, Any]) -> SessionInfo:
--
206-        
207-        # CLI mode: Always compute fresh data (no caching)
208:        if self.operation_mode == OperationMode.CLI or self.cache is None:
209-            return compute_session_info()
210-        
211:        # Other modes: Use cache with compute function
212:        cache_key = f"session_{project_name}"
213:        return self.cache.get_or_compute(cache_key, compute_session_info)
214-    
215-    def _get_window_info(self, window) -> WindowInfo:
--
595-            }
596-    
597:    def invalidate_cache(self, project_name: str = None) -> None:
598-        """
599:        Invalidate session cache entries (mode-aware)
600-        
601-        Args:
602-            project_name: Specific project to invalidate, or None for all
603-        """
604:        # CLI mode: No cache to invalidate
605:        if self.operation_mode == OperationMode.CLI or self.cache is None:
606:            self.logger.debug("CLI mode: No cache to invalidate")
607-            return
608-        
--
610-            # Invalidate specific session
611-            session_key = f"session_{project_name}"
612:            invalidated = self.cache.invalidate(session_key)
613-            if invalidated:
614:                self.logger.debug(f"Invalidated cache for project: {project_name}")
615-        else:
616-            # Invalidate all sessions
617:            cleared = self.cache.clear()
618:            self.logger.info(f"Cleared all session cache entries: {cleared}")
619-    
620:    def invalidate_all_sessions_cache(self) -> None:
621:        """Invalidate the all_sessions cache specifically (mode-aware)"""
622:        # CLI mode: No cache to invalidate
623:        if self.operation_mode == OperationMode.CLI or self.cache is None:
624:            self.logger.debug("CLI mode: No cache to invalidate")
625-            return
626-        
627:        invalidated = self.cache.invalidate("all_sessions")
628-        if invalidated:
629:            self.logger.debug("Invalidated all_sessions cache")
630-    
631:    def get_cache_stats(self) -> Dict[str, Any]:
632:        """Get cache performance statistics (mode-aware)"""
633-        # CLI mode: Return empty stats
634:        if self.operation_mode == OperationMode.CLI or self.cache is None:
635-            return {
636-                'hits': 0,
--
641-                'evictions': 0,
642-                'mode': self.operation_mode.value,
643:                'cache_enabled': False
644-            }
645-        
646:        stats = self.cache.get_stats()
647-        return {
648-            'hits': stats.hits,
--
653-            'evictions': stats.evictions,
654-            'mode': self.operation_mode.value,
655:            'cache_enabled': True
656-        }

--- Dashboard Widgets Cache Usage ---
File: libs/dashboard/widgets/git_activity.py
47:        self.stats_cache: Optional[GitStats] = None
48:        self.cache_timeout = 300  # 5 minutes
55:        # Use cache if still valid
56:        if (self.stats_cache and 
57:            current_time - self.last_update < self.cache_timeout):
58:            return self.stats_cache
69:            self.stats_cache = GitStats(
79:            return self.stats_cache
83:            self.stats_cache = GitStats(
91:            return self.stats_cache

File: libs/dashboard/widgets/progress_tracker.py
58:        self.stats_cache: Optional[ProgressStats] = None
59:        self.cache_timeout = 60  # 1 minute
71:            self._invalidate_cache()
82:        self._invalidate_cache()
162:            'performance': ['performance', 'optimization', 'cache', 'speed'],
178:    def _invalidate_cache(self):
179:        """Invalidate cached statistics"""
180:        self.stats_cache = None
187:        # Use cache if valid
188:        if (self.stats_cache and 
189:            current_time - self.last_update < self.cache_timeout):
190:            return self.stats_cache
221:        self.stats_cache = ProgressStats(
232:        return self.stats_cache

File: libs/dashboard/widgets/project_health.py
37:        self.project_cache: Dict[str, ProjectStatus] = {}
73:            self.project_cache[project_name] = status
88:            self.project_cache[project_name] = status
93:        if project_name not in self.project_cache:
96:        status = self.project_cache[project_name]
136:        if project_name not in self.project_cache:
139:        status = self.project_cache[project_name]
179:        if project_name not in self.project_cache:
216:        if project_name not in self.project_cache:
219:        status = self.project_cache[project_name]
247:            if project_name in self.project_cache:
248:                card = self._create_project_card(self.project_cache[project_name])
315:        if project_name not in self.project_cache:
318:        status = self.project_cache[project_name]

--- API Cache Usage ---
api/routers/sessions.py:55:@router.get("/sessions/cached", response_model=List[dict])
api/routers/sessions.py:56:def get_cached_sessions():
api/routers/sessions.py:59:        return tm.get_cached_sessions_list()
api/routers/sessions.py:84:        tm.invalidate_session_cache()
api/routers/sessions.py:106:        tm.invalidate_session_cache()
api/routers/sessions.py:111:@router.get("/sessions/cache/stats")
api/routers/sessions.py:112:def get_cache_stats():
api/routers/sessions.py:115:        return tm.get_cache_stats()
api/routers/sessions.py:119:@router.post("/sessions/cache/invalidate", status_code=204)
api/routers/sessions.py:120:def invalidate_cache(session_name: str = None):
api/routers/sessions.py:123:        tm.invalidate_session_cache(session_name)

=== Cache Test Files ===
tests/unit/core/cache/test_cache_strategies.py.backup
tests/unit/core/cache/test_cache_invalidation_strategies.py
tests/unit/core/cache/test_cache_change_detection.py
tests/unit/core/cache/test_session_cache.py
tests/unit/core/cache/test_cache_ttl_management.py
tests/integration/cache/test_session_manager_cache.py
tests/integration/cache/test_dashboard_cache_integration.py
tests/integration/cache/test_session_cache_integration.py
tests/integration/cache/test_cache_visualization.py

=== Cache Test Files Size ===
     313 tests/unit/core/cache/test_cache_strategies.py.backup
     140 tests/unit/core/cache/test_cache_invalidation_strategies.py
      74 tests/unit/core/cache/test_cache_change_detection.py
     309 tests/unit/core/cache/test_session_cache.py
     113 tests/unit/core/cache/test_cache_ttl_management.py
     211 tests/integration/cache/test_session_manager_cache.py
     228 tests/integration/cache/test_dashboard_cache_integration.py
     169 tests/integration/cache/test_session_cache_integration.py
     249 tests/integration/cache/test_cache_visualization.py

=== Cache Test Functions Count ===
tests/unit/core/cache/test_cache_invalidation_strategies.py:3
tests/unit/core/cache/test_cache_change_detection.py:1
tests/unit/core/cache/test_session_cache.py:15
tests/unit/core/cache/test_cache_ttl_management.py:2
tests/integration/cache/test_session_manager_cache.py:10
tests/integration/cache/test_dashboard_cache_integration.py:4
tests/integration/cache/test_session_cache_integration.py:3
tests/integration/cache/test_cache_visualization.py:6

