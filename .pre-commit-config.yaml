# Pre-commit configuration for Yesman-Claude project (Optimized Development Flow)
# Strategy: pre-commit (ultra-light), pre-push (comprehensive)
# 
# pre-commit:  Only essential fixes + formatting (1-3s)
# pre-push:    Full validation (lint + tests) (5-10s)
# Run with: pre-commit run --all-files

repos:
  # Python code quality - OPTIMIZED ORDER: format first, then check
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.3
    hooks:
      # Step 1: Format code first (this fixes many issues)
      - id: ruff-format
        args: [--target-version=py311]
        exclude: ^(migrations/|node_modules/|tests/|docs/examples/)
      # Step 2: Apply safe fixes after formatting (essential rules only)
      - id: ruff
        args: [--fix, --target-version=py311, --select, E,W,F,I]  # E/W/F errors + import sorting
        exclude: ^(migrations/|node_modules/|tests/|docs/examples/)
      # Step 3: Final validation (ensure fixes worked)
      - id: ruff
        name: ruff-final-check
        args: [--target-version=py311, --select, E,W,F,I]  # Same rules as step 2
        exclude: ^(migrations/|node_modules/|tests/|docs/examples/)

  # Essential file checks (ultra-lightweight for pre-commit)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-merge-conflict  # Critical - prevent broken merges
      - id: check-added-large-files
        args: ['--maxkb=1000']
      # Removed debug-statements - too slow and causes parsing errors
      # Moved to pre-push stage for comprehensive checking

  # NOTE: Moved mdformat, mypy, bandit to pre-push stage
  # pre-commit should be FAST (1-3s) - only essential fixes

  # Comprehensive checks moved to pre-push (no duplication with pre-commit)
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.22
    hooks:
      - id: mdformat
        args: [--wrap=120, --check]  # Check-only in pre-push
        exclude: ^(node_modules/|tauri-dashboard/|\.github/workflows/)
        stages: [pre-push]
        additional_dependencies:
          - mdformat-gfm
          - mdformat-tables
          - mdformat-frontmatter

  # Type checking in pre-push (comprehensive)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.17.0
    hooks:
      - id: mypy
        additional_dependencies: [types-PyYAML]
        files: ^(libs/|commands/|api/)
        args: [--config-file=pyproject.toml, --ignore-missing-imports]
        stages: [pre-push]

  # Security checks in pre-push (thorough)
  - repo: https://github.com/pycqa/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args: [-r, -s, B101,B404,B603,B607,B602, --severity-level, medium, --quiet]
        exclude: ^(tests/|scripts/|debug/|docs/examples/|test_style_violation\.py)
        pass_filenames: false
        files: ^(libs/|commands/)
        stages: [pre-push]

  # Additional pre-push validations
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: debug-statements  # Comprehensive debug statement check
        exclude: ^(debug/|scripts/debug_)
        stages: [pre-push]
      - id: check-yaml
        exclude: ^(.github/|node_modules/)
        stages: [pre-push]
      - id: check-json
        exclude: ^(node_modules/|package-lock\.json)
        stages: [pre-push]

  # Final validation (replaces make lint + make test-fast)
  - repo: local
    hooks:
      - id: test-fast-final
        name: "âš¡ Fast Tests (final validation)"
        entry: make test-fast
        language: system
        stages: [pre-push]
        pass_filenames: false

# =============================================================================
# Global Configuration - Two-Stage Quality Strategy
# =============================================================================

# Install both pre-commit and pre-push hooks by default
default_install_hook_types: [pre-commit, pre-push]
default_stages: [pre-commit]  # Most hooks run on pre-commit by default

# CI configuration (pre-commit.ci service)
ci:
  autofix_commit_msg: |
    fix(format): automated formatting and essential fixes
    
    Applied by pre-commit.ci - only essential code formatting
    Comprehensive validation happens at pre-push stage
    
    ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: 'chore(deps): update pre-commit hooks'
  autoupdate_schedule: weekly
  skip: []  # Don't skip any hooks in CI
  submodules: false

# =============================================================================
# OPTIMIZED STRATEGY:
# 
# pre-commit (1-3s):  Essential fixes only
#   - Code formatting (ruff-format)
#   - Safe auto-fixes (ruff --fix essential rules)
#   - Final validation (ruff check same rules)
#   - Merge conflict detection
#   - Large file check
#
# pre-push (5-10s):   Comprehensive validation
#   - Markdown formatting check
#   - Type checking (mypy)
#   - Security scanning (bandit)
#   - Debug statement detection
#   - YAML/JSON validation
#   - Fast tests
#
# Usage:
#   1. Install: make hooks-install
#   2. Develop: git commit (fast pre-commit)
#   3. Push: git push (comprehensive pre-push)
#   4. Manual: pre-commit run --all-files
# =============================================================================
